#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# config
APACHE_VERSION="2.4.3"
APACHE_PATH="apache"
PHP_VERSION="5.4.11"
PHP_PATH="php"
export NEW_RELIC_LICENSE_KEY="4e09c83d11e5c42a98b4fdcaf31ad40b1f4a11a7"


NEWRELIC_VERSION=2.9.5.78
S3_BUCKET=heroku-buildpack-php-tyler
S3_URL="https://s3.amazonaws.com/${S3_BUCKET}"

MANIFEST_FILE="manifest.md5sum"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"

MANIFEST_URL="${S3_URL}/${MANIFEST_FILE}"
NEWRELIC_URL="${S3_URL}/${NEWRELIC_FILE}"

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}


BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

APACHE_URL="https://s3-ap-southeast-2.amazonaws.com/ngson2000/apache-$APACHE_VERSION.tar.gz"
echo "-----> Bundling Apache version $APACHE_VERSION"
curl --silent --max-time 60 --location "$APACHE_URL" | tar xz

PHP_URL="https://s3-ap-southeast-2.amazonaws.com/ngson2000/php-$PHP_VERSION.tar.gz"
echo "-----> Bundling PHP version $PHP_VERSION"
curl --silent --max-time 60 --location "$PHP_URL" | tar xz

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $LP_DIR/conf/php.ini $PHP_PATH
PHP_OPTS="-c $(pwd)/php/php.ini -d extension_dir=$(pwd)/php/lib/php/extensions/no-debug-zts-20100525"
cp $LP_DIR/ext/zip.so $(pwd)/php/lib/php/extensions/no-debug-zts-20100525/

# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

# create mahara data folder
mkdir -p /app/moodledata

# newrelic
echo "-----> Installing newrelic"
if [ -f "${NEWRELIC_FILE}" ]
then
	if check_md5 "${NEWRELIC_FILE}"
	then
		echo "Bundling newrelic daemon v${NEWRELIC_VERSION}" | indent
		echo ${NEWRELIC_URL} | indent
		#download_url ${NEWRELIC_URL}
	else
		echo "Using cached newrelic daemon v${NEWRELIC_VERSION}" | indent
	fi
else
	echo "Bundling newrelic daemon v${NEWRELIC_VERSION}" | indent
	echo ${NEWRELIC_URL} | indent
	#download_url ${NEWRELIC_URL}
fi
#tar xzf ${NEWRELIC_FILE} -C ${BUILD_DIR}/local
curl --silent --max-time 60 --location "$NEWRELIC_FILE" | tar xzf


cat >>boot.sh <<EOF
for var in ¥`env|cut -f1 -d=¥`; do
  echo "PassEnv ¥$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/ext
export PHP_INI_SCAN_DIR=/app/www

# Set NEWRELIC key
if [ -x "newrelic-${NEWRELIC_VERSION}-heroku/bin/newrelic-license" ]; then
	newrelic-${NEWRELIC_VERSION}-heroku/bin/newrelic-license
fi

echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH

EOF


chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR
